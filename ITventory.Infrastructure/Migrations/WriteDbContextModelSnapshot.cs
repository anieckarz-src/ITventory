// <auto-generated />
using System;
using ITventory.Infrastructure.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ITventory.Infrastructure.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    partial class WriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ITventory.Domain.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Regulations")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PositionName")
                        .HasColumnType("text");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Seniority")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RoomId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Entities.JoinTables.EmployeeLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LicenseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LicenseId");

                    b.ToTable("EmployeeLicense", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Entities.JoinTables.HardwareLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("HardwareId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LicenseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HardwareId");

                    b.HasIndex("LicenseId");

                    b.ToTable("HardwareLicense", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Entities.RatingSoftwareVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("RateDate")
                        .HasColumnType("date");

                    b.Property<Guid>("RatedById")
                        .HasColumnType("uuid");

                    b.Property<int>("RatingMark")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReviewedProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SoftwareVersionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RatedById");

                    b.HasIndex("ReviewedProductId");

                    b.HasIndex("SoftwareVersionId");

                    b.ToTable("RatingSoftwareVersion", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<int>("ModelYear")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProducentId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("PurchasedDate")
                        .HasColumnType("date");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Worth")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProducentId");

                    b.HasIndex("RoomId");

                    b.ToTable("Equipment", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Hardware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DefaultDomain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("HardwareType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<int>("ModelYear")
                        .HasColumnType("integer");

                    b.Property<Guid>("PrimaryUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProducentId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("PurchasedDate")
                        .HasColumnType("date");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Worth")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ModelId");

                    b.HasIndex("PrimaryUserId");

                    b.HasIndex("ProducentId");

                    b.HasIndex("RoomId");

                    b.ToTable("Hardware", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.InventoryProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("SKU")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RoomId");

                    b.ToTable("InventoryProduct", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TypeOfPlant")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Logon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HardwareId")
                        .HasColumnType("uuid");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LogonTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HardwareId");

                    b.HasIndex("UserId");

                    b.ToTable("Logon", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ProducentId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ReleaseDate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProducentId");

                    b.ToTable("Model", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Office", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Producent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Producent", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("MaxSKU")
                        .HasColumnType("integer");

                    b.Property<double>("NominalWorth")
                        .HasColumnType("double precision");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ReviewDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReviwedEquipmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("ReviwedEquipmentId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float?>("Area")
                        .HasColumnType("real");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonResponsibleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PersonResponsibleId");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Software", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovalType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Software", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.SoftwareLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LicenseKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LicenseType")
                        .HasColumnType("integer");

                    b.Property<int>("MaxUse")
                        .HasColumnType("integer");

                    b.Property<Guid>("SoftwareVersion")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ValidUntil")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareVersion");

                    b.ToTable("SoftwareLicense", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.SoftwareVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("LicenseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("Published")
                        .HasColumnType("date");

                    b.Property<Guid>("SoftwareId")
                        .HasColumnType("uuid");

                    b.Property<string>("VersionNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareId");

                    b.ToTable("SoftwareVersions", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Department", b =>
                {
                    b.HasOne("ITventory.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Employee", b =>
                {
                    b.HasOne("ITventory.Domain.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ITventory.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("ITventory.Domain.Room", null)
                        .WithMany("Employees")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("ITventory.Domain.Entities.JoinTables.EmployeeLicense", b =>
                {
                    b.HasOne("ITventory.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.SoftwareLicense", null)
                        .WithMany("AssignedUsers")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Entities.JoinTables.HardwareLicense", b =>
                {
                    b.HasOne("ITventory.Domain.Hardware", null)
                        .WithMany()
                        .HasForeignKey("HardwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.SoftwareLicense", null)
                        .WithMany("AssignedHardware")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Entities.RatingSoftwareVersion", b =>
                {
                    b.HasOne("ITventory.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("RatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ReviewedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.SoftwareVersion", null)
                        .WithMany("Reviews")
                        .HasForeignKey("SoftwareVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Equipment", b =>
                {
                    b.HasOne("ITventory.Domain.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Model", null)
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Producent", null)
                        .WithMany()
                        .HasForeignKey("ProducentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Hardware", b =>
                {
                    b.HasOne("ITventory.Domain.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Model", null)
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("PrimaryUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Producent", null)
                        .WithMany()
                        .HasForeignKey("ProducentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.InventoryProduct", b =>
                {
                    b.HasOne("ITventory.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Room", null)
                        .WithMany("RoomInventory")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ITventory.Domain.Location", b =>
                {
                    b.HasOne("ITventory.Domain.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ITventory.Domain.ValueObjects.Latitude", "Latitude", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision");

                            b1.HasKey("LocationId");

                            b1.ToTable("Location");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.OwnsOne("ITventory.Domain.ValueObjects.Longitude", "Longitude", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision");

                            b1.HasKey("LocationId");

                            b1.ToTable("Location");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.OwnsOne("ITventory.Domain.ValueObjects.ZipCode", "ZipCode", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("LocationId");

                            b1.ToTable("Location");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.Navigation("Latitude")
                        .IsRequired();

                    b.Navigation("Longitude")
                        .IsRequired();

                    b.Navigation("ZipCode")
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Logon", b =>
                {
                    b.HasOne("ITventory.Domain.Hardware", null)
                        .WithMany("HistoryOfLogons")
                        .HasForeignKey("HardwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Model", b =>
                {
                    b.HasOne("ITventory.Domain.Producent", null)
                        .WithMany()
                        .HasForeignKey("ProducentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Office", b =>
                {
                    b.HasOne("ITventory.Domain.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ITventory.Domain.ValueObjects.Latitude", "Lattitude", b1 =>
                        {
                            b1.Property<Guid>("OfficeId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision");

                            b1.HasKey("OfficeId");

                            b1.ToTable("Office");

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.OwnsOne("ITventory.Domain.ValueObjects.Longitude", "Longitude", b1 =>
                        {
                            b1.Property<Guid>("OfficeId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision");

                            b1.HasKey("OfficeId");

                            b1.ToTable("Office");

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.Navigation("Lattitude")
                        .IsRequired();

                    b.Navigation("Longitude")
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Producent", b =>
                {
                    b.HasOne("ITventory.Domain.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Review", b =>
                {
                    b.HasOne("ITventory.Domain.Equipment", null)
                        .WithMany("HistoryOfReviews")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("ITventory.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Equipment", null)
                        .WithMany()
                        .HasForeignKey("ReviwedEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Room", b =>
                {
                    b.HasOne("ITventory.Domain.Office", null)
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("PersonResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Software", b =>
                {
                    b.HasOne("ITventory.Domain.Department", null)
                        .WithMany("RecommendedSoftware")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ITventory.Domain.Producent", null)
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.SoftwareLicense", b =>
                {
                    b.HasOne("ITventory.Domain.SoftwareVersion", null)
                        .WithMany()
                        .HasForeignKey("SoftwareVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.SoftwareVersion", b =>
                {
                    b.HasOne("ITventory.Domain.Software", null)
                        .WithMany("SoftwareVersions")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Department", b =>
                {
                    b.Navigation("RecommendedSoftware");
                });

            modelBuilder.Entity("ITventory.Domain.Equipment", b =>
                {
                    b.Navigation("HistoryOfReviews");
                });

            modelBuilder.Entity("ITventory.Domain.Hardware", b =>
                {
                    b.Navigation("HistoryOfLogons");
                });

            modelBuilder.Entity("ITventory.Domain.Room", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("RoomInventory");
                });

            modelBuilder.Entity("ITventory.Domain.Software", b =>
                {
                    b.Navigation("SoftwareVersions");
                });

            modelBuilder.Entity("ITventory.Domain.SoftwareLicense", b =>
                {
                    b.Navigation("AssignedHardware");

                    b.Navigation("AssignedUsers");
                });

            modelBuilder.Entity("ITventory.Domain.SoftwareVersion", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
