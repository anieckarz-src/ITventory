// <auto-generated />
using System;
using ITventory.Infrastructure.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ITventory.Infrastructure.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    partial class WriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hardware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DefaultDomain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("HardwareType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<int>("ModelYear")
                        .HasColumnType("integer");

                    b.Property<Guid>("PrimaryUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProducentId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("PurchasedDate")
                        .HasColumnType("date");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Worth")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ModelId");

                    b.HasIndex("PrimaryUserId");

                    b.HasIndex("ProducentId");

                    b.HasIndex("RoomId");

                    b.ToTable("Hardware", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Regulations")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0101"),
                            CountryCode = "US",
                            Name = "United States",
                            Region = "NorthAmerica"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0102"),
                            CountryCode = "CN",
                            Name = "China",
                            Region = "Asia"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0103"),
                            CountryCode = "JP",
                            Name = "Japan",
                            Region = "Asia"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0104"),
                            CountryCode = "DE",
                            Name = "Germany",
                            Region = "Europe"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0105"),
                            CountryCode = "KR",
                            Name = "South Korea",
                            Region = "Asia"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0106"),
                            CountryCode = "IN",
                            Name = "India",
                            Region = "Asia"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0107"),
                            CountryCode = "TW",
                            Name = "Taiwan",
                            Region = "Asia"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0108"),
                            CountryCode = "IL",
                            Name = "Israel",
                            Region = "Asia"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0109"),
                            CountryCode = "GB",
                            Name = "United Kingdom",
                            Region = "Europe"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0110"),
                            CountryCode = "FR",
                            Name = "France",
                            Region = "Europe"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0111"),
                            CountryCode = "CA",
                            Name = "Canada",
                            Region = "NorthAmerica"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0112"),
                            CountryCode = "SG",
                            Name = "Singapore",
                            Region = "Asia"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0113"),
                            CountryCode = "NL",
                            Name = "Netherlands",
                            Region = "Europe"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0114"),
                            CountryCode = "SE",
                            Name = "Sweden",
                            Region = "Europe"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0115"),
                            CountryCode = "FI",
                            Name = "Finland",
                            Region = "Europe"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0116"),
                            CountryCode = "AU",
                            Name = "Australia",
                            Region = "Australia"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0117"),
                            CountryCode = "IE",
                            Name = "Ireland",
                            Region = "Europe"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0118"),
                            CountryCode = "CH",
                            Name = "Switzerland",
                            Region = "Europe"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0119"),
                            CountryCode = "BE",
                            Name = "Belgium",
                            Region = "Europe"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0120"),
                            CountryCode = "PL",
                            Name = "Poland",
                            Region = "Europe"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0121"),
                            CountryCode = "IT",
                            Name = "Italy",
                            Region = "Europe"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0122"),
                            CountryCode = "ES",
                            Name = "Spain",
                            Region = "Europe"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0123"),
                            CountryCode = "AE",
                            Name = "UAE",
                            Region = "Asia"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0124"),
                            CountryCode = "MY",
                            Name = "Malaysia",
                            Region = "Asia"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0125"),
                            CountryCode = "NZ",
                            Name = "New Zealand",
                            Region = "Australia"
                        },
                        new
                        {
                            Id = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0126"),
                            CountryCode = "NO",
                            Name = "Norway",
                            Region = "Europe"
                        });
                });

            modelBuilder.Entity("ITventory.Domain.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PositionName")
                        .HasColumnType("text");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Seniority")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RoomId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Entities.JoinTables.EmployeeLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LicenseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LicenseId");

                    b.ToTable("EmployeeLicense", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Entities.JoinTables.HardwareLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HardwareId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LicenseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HardwareId");

                    b.HasIndex("LicenseId");

                    b.ToTable("HardwareLicense", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Entities.RatingSoftwareVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("RateDate")
                        .HasColumnType("date");

                    b.Property<Guid>("RatedById")
                        .HasColumnType("uuid");

                    b.Property<int>("RatingMark")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReviewedProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SoftwareVersionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RatedById");

                    b.HasIndex("SoftwareVersionId");

                    b.ToTable("RatingSoftwareVersion", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<int>("ModelYear")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProducentId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("PurchasedDate")
                        .HasColumnType("date");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Worth")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProducentId");

                    b.HasIndex("RoomId");

                    b.ToTable("Equipment", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.InventoryProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("SKU")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RoomId");

                    b.ToTable("InventoryProduct", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("Latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TypeOfPlant")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Location", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a2b3c4d-0001-0000-0000-000000000001"),
                            City = "Warsaw",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0120"),
                            Latitude = 52.229700000000001,
                            Longitude = 21.0122,
                            Name = "Warsaw AGR East",
                            TypeOfPlant = "Factory",
                            ZipCode = "00-001"
                        },
                        new
                        {
                            Id = new Guid("1a2b3c4d-0002-0000-0000-000000000002"),
                            City = "Kraków",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0120"),
                            Latitude = 50.064700000000002,
                            Longitude = 19.945,
                            Name = "Krakow Warehouse",
                            TypeOfPlant = "Warehouse",
                            ZipCode = "30-001"
                        },
                        new
                        {
                            Id = new Guid("1a2b3c4d-0003-0000-0000-000000000003"),
                            City = "Gdańsk",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0120"),
                            Latitude = 54.351999999999997,
                            Longitude = 18.646599999999999,
                            Name = "Gdansk Other",
                            TypeOfPlant = "Other",
                            ZipCode = "80-001"
                        },
                        new
                        {
                            Id = new Guid("1a2b3c4d-0004-0000-0000-000000000004"),
                            City = "Wrocław",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0120"),
                            Latitude = 51.107900000000001,
                            Longitude = 17.038499999999999,
                            Name = "Wroclaw Factory",
                            TypeOfPlant = "Factory",
                            ZipCode = "50-001"
                        },
                        new
                        {
                            Id = new Guid("1a2b3c4d-0005-0000-0000-000000000005"),
                            City = "Poznań",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0120"),
                            Latitude = 52.4084,
                            Longitude = 16.934200000000001,
                            Name = "Poznan Warehouse",
                            TypeOfPlant = "Warehouse",
                            ZipCode = "60-001"
                        },
                        new
                        {
                            Id = new Guid("2b3c4d5e-0001-0000-0000-000000000006"),
                            City = "Skopje",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0117"),
                            Latitude = 41.998100000000001,
                            Longitude = 21.4254,
                            Name = "Skopje Factory",
                            TypeOfPlant = "Factory",
                            ZipCode = "10-00"
                        },
                        new
                        {
                            Id = new Guid("2b3c4d5e-0002-0000-0000-000000000007"),
                            City = "Bitola",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0117"),
                            Latitude = 41.033299999999997,
                            Longitude = 21.333300000000001,
                            Name = "Bitola Warehouse",
                            TypeOfPlant = "Warehouse",
                            ZipCode = "70-00"
                        },
                        new
                        {
                            Id = new Guid("2b3c4d5e-0003-0000-0000-000000000008"),
                            City = "Ohrid",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0117"),
                            Latitude = 41.116700000000002,
                            Longitude = 20.800000000000001,
                            Name = "Ohrid Other",
                            TypeOfPlant = "Other",
                            ZipCode = "60-00"
                        },
                        new
                        {
                            Id = new Guid("3c4d5e6f-0001-0000-0000-000000000009"),
                            City = "Berlin",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0104"),
                            Latitude = 52.520000000000003,
                            Longitude = 13.404999999999999,
                            Name = "Berlin Factory",
                            TypeOfPlant = "Factory",
                            ZipCode = "10-115"
                        },
                        new
                        {
                            Id = new Guid("3c4d5e6f-0002-0000-0000-000000000010"),
                            City = "Munich",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0104"),
                            Latitude = 48.135100000000001,
                            Longitude = 11.582000000000001,
                            Name = "Munich Warehouse",
                            TypeOfPlant = "Warehouse",
                            ZipCode = "80-331"
                        },
                        new
                        {
                            Id = new Guid("4d5e6f70-0001-0000-0000-000000000011"),
                            City = "Amsterdam",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0113"),
                            Latitude = 52.367600000000003,
                            Longitude = 4.9040999999999997,
                            Name = "Amsterdam Factory",
                            TypeOfPlant = "Factory",
                            ZipCode = "10-12"
                        },
                        new
                        {
                            Id = new Guid("4d5e6f70-0002-0000-0000-000000000012"),
                            City = "Rotterdam",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0113"),
                            Latitude = 51.922499999999999,
                            Longitude = 4.4791699999999999,
                            Name = "Rotterdam Warehouse",
                            TypeOfPlant = "Warehouse",
                            ZipCode = "30-11"
                        },
                        new
                        {
                            Id = new Guid("5e6f7081-0001-0000-0000-000000000013"),
                            City = "London",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0109"),
                            Latitude = 51.507399999999997,
                            Longitude = -0.1278,
                            Name = "London Factory",
                            TypeOfPlant = "Factory",
                            ZipCode = "EC1A-1BB"
                        },
                        new
                        {
                            Id = new Guid("5e6f7081-0002-0000-0000-000000000014"),
                            City = "Manchester",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0109"),
                            Latitude = 53.480800000000002,
                            Longitude = -2.2425999999999999,
                            Name = "Manchester Warehouse",
                            TypeOfPlant = "Warehouse",
                            ZipCode = "M1-1AE"
                        },
                        new
                        {
                            Id = new Guid("6f708192-0001-0000-0000-000000000015"),
                            City = "Rome",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0105"),
                            Latitude = 41.902799999999999,
                            Longitude = 12.4964,
                            Name = "Rome Factory",
                            TypeOfPlant = "Factory",
                            ZipCode = "00-184"
                        },
                        new
                        {
                            Id = new Guid("6f708192-0002-0000-0000-000000000016"),
                            City = "Milan",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0105"),
                            Latitude = 45.464199999999998,
                            Longitude = 9.1899999999999995,
                            Name = "Milan Warehouse",
                            TypeOfPlant = "Warehouse",
                            ZipCode = "20-121"
                        },
                        new
                        {
                            Id = new Guid("708192a3-0001-0000-0000-000000000017"),
                            City = "Paris",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0106"),
                            Latitude = 48.8566,
                            Longitude = 2.3521999999999998,
                            Name = "Paris Factory",
                            TypeOfPlant = "Factory",
                            ZipCode = "75-001"
                        },
                        new
                        {
                            Id = new Guid("708192a3-0002-0000-0000-000000000018"),
                            City = "Lyon",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0106"),
                            Latitude = 45.764000000000003,
                            Longitude = 4.8357000000000001,
                            Name = "Lyon Warehouse",
                            TypeOfPlant = "Warehouse",
                            ZipCode = "69-001"
                        },
                        new
                        {
                            Id = new Guid("8192a3b4-0001-0000-0000-000000000019"),
                            City = "Madrid",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0110"),
                            Latitude = 40.416800000000002,
                            Longitude = -3.7038000000000002,
                            Name = "Madrid Factory",
                            TypeOfPlant = "Factory",
                            ZipCode = "28-001"
                        },
                        new
                        {
                            Id = new Guid("8192a3b4-0002-0000-0000-000000000020"),
                            City = "Barcelona",
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0110"),
                            Latitude = 41.385100000000001,
                            Longitude = 2.1734,
                            Name = "Barcelona Warehouse",
                            TypeOfPlant = "Warehouse",
                            ZipCode = "08-001"
                        });
                });

            modelBuilder.Entity("ITventory.Domain.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ProducentId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ProducentId");

                    b.ToTable("Model", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bfeee839-38a5-4aa7-89dd-6296f39b1694"),
                            Name = "ZH-500",
                            ProducentId = new Guid("58ea87f5-103a-4567-8fda-9b2a32be2ff9"),
                            ReleaseDate = new DateOnly(2016, 5, 2)
                        },
                        new
                        {
                            Id = new Guid("a1122334-5566-7788-99aa-bbccddeeff00"),
                            Name = "Xperia Z5",
                            ProducentId = new Guid("04dabce6-41f7-4a66-8c34-963cedd62a7f"),
                            ReleaseDate = new DateOnly(2015, 10, 1)
                        },
                        new
                        {
                            Id = new Guid("a2233445-6677-8899-aabb-ccddeeff0011"),
                            Name = "iPhone 12",
                            ProducentId = new Guid("a1b2c3d4-e5f6-7890-a1b2-c3d4e5f67890"),
                            ReleaseDate = new DateOnly(2020, 10, 23)
                        },
                        new
                        {
                            Id = new Guid("a3344556-7788-99aa-bbcc-ddeeff001122"),
                            Name = "Surface Pro 7",
                            ProducentId = new Guid("b2c3d4e5-f678-90a1-b2c3-d4e5f67890a1"),
                            ReleaseDate = new DateOnly(2019, 10, 22)
                        },
                        new
                        {
                            Id = new Guid("a4455667-8899-aabb-ccdd-eeff00112233"),
                            Name = "Core i9-11900K",
                            ProducentId = new Guid("c3d4e5f6-7890-a1b2-c3d4-e5f67890a1b2"),
                            ReleaseDate = new DateOnly(2021, 3, 16)
                        },
                        new
                        {
                            Id = new Guid("a5566778-99aa-bbcc-ddee-ff0011223344"),
                            Name = "Pixel 5",
                            ProducentId = new Guid("d4e5f678-90a1-b2c3-d4e5-f67890a1b2c3"),
                            ReleaseDate = new DateOnly(2020, 10, 15)
                        },
                        new
                        {
                            Id = new Guid("a6677889-aabb-ccdd-eeff-001122334455"),
                            Name = "Galaxy S21",
                            ProducentId = new Guid("e5f67890-a1b2-c3d4-e5f6-7890a1b2c3d4"),
                            ReleaseDate = new DateOnly(2021, 1, 29)
                        },
                        new
                        {
                            Id = new Guid("a778899a-bbcc-ddee-ff00-112233445566"),
                            Name = "LG Velvet",
                            ProducentId = new Guid("f67890a1-b2c3-d4e5-f678-90a1b2c3d4e5"),
                            ReleaseDate = new DateOnly(2020, 5, 15)
                        },
                        new
                        {
                            Id = new Guid("a8899aab-ccdd-eeff-0011-223344556677"),
                            Name = "Mate 40 Pro",
                            ProducentId = new Guid("7890a1b2-c3d4-e5f6-7890-a1b2c3d4e5f6"),
                            ReleaseDate = new DateOnly(2020, 10, 22)
                        },
                        new
                        {
                            Id = new Guid("a99aabbc-ddee-ff00-1122-334455667788"),
                            Name = "ThinkPad X1 Carbon Gen 9",
                            ProducentId = new Guid("890a1b2c-d4e5-f678-90a1-b2c3d4e5f678"),
                            ReleaseDate = new DateOnly(2021, 1, 12)
                        },
                        new
                        {
                            Id = new Guid("aaabbcdd-eeff-0011-2233-445566778899"),
                            Name = "XPS 13",
                            ProducentId = new Guid("90a1b2c3-d4e5-f678-90a1-b2c3d4e5f678"),
                            ReleaseDate = new DateOnly(2020, 9, 30)
                        },
                        new
                        {
                            Id = new Guid("bbccddee-ff00-1122-3344-5566778899aa"),
                            Name = "SIMATIC S7-1500",
                            ProducentId = new Guid("90a1b2c3-d4e5-f678-90a1-b2c3d4e5f678"),
                            ReleaseDate = new DateOnly(2015, 7, 15)
                        },
                        new
                        {
                            Id = new Guid("ccddeeff-0011-2233-4455-66778899aabb"),
                            Name = "PS5",
                            ProducentId = new Guid("a1b2c3d4-e5f6-7890-a1b2-c3d4e5f67890"),
                            ReleaseDate = new DateOnly(2020, 11, 12)
                        },
                        new
                        {
                            Id = new Guid("ddeeff00-1122-3344-5566-778899aabbcc"),
                            Name = "Nokia 8.3 5G",
                            ProducentId = new Guid("7890a1b2-c3d4-e5f6-7890-a1b2c3d4e5f7"),
                            ReleaseDate = new DateOnly(2020, 9, 15)
                        },
                        new
                        {
                            Id = new Guid("eeff0011-2233-4455-6677-8899aabbccdd"),
                            Name = "AirPods Pro",
                            ProducentId = new Guid("a1b2c3d4-e5f6-7890-a1b2-c3d4e5f67890"),
                            ReleaseDate = new DateOnly(2019, 10, 30)
                        },
                        new
                        {
                            Id = new Guid("ff001122-3344-5566-7788-99aabbccddee"),
                            Name = "Razer Blade 15",
                            ProducentId = new Guid("a1b2c3d4-e5f6-7890-a1b2-c3d4e5f67890"),
                            ReleaseDate = new DateOnly(2021, 3, 1)
                        });
                });

            modelBuilder.Entity("ITventory.Domain.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("Latitude");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("Longitude");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Office");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1a2b3c4-0001-0000-0000-000000000001"),
                            BuildingNumber = "3A",
                            IsActive = true,
                            Latitude = 52.229700000000001,
                            LocationId = new Guid("1a2b3c4d-0001-0000-0000-000000000001"),
                            Longitude = 21.0122,
                            Street = "Marszałkowska 5"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0002-0000-0000-000000000002"),
                            BuildingNumber = "5B",
                            IsActive = true,
                            Latitude = 50.064700000000002,
                            LocationId = new Guid("1a2b3c4d-0002-0000-0000-000000000002"),
                            Longitude = 19.945,
                            Street = "Krakowska 12"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0003-0000-0000-000000000003"),
                            BuildingNumber = "1C",
                            IsActive = true,
                            Latitude = 54.351999999999997,
                            LocationId = new Guid("1a2b3c4d-0003-0000-0000-000000000003"),
                            Longitude = 18.646599999999999,
                            Street = "Długa 7"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0004-0000-0000-000000000004"),
                            BuildingNumber = "2",
                            IsActive = true,
                            Latitude = 51.107900000000001,
                            LocationId = new Guid("1a2b3c4d-0004-0000-0000-000000000004"),
                            Longitude = 17.038499999999999,
                            Street = "Rynek 1"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0005-0000-0000-000000000005"),
                            BuildingNumber = "A",
                            IsActive = true,
                            Latitude = 52.4084,
                            LocationId = new Guid("1a2b3c4d-0005-0000-0000-000000000005"),
                            Longitude = 16.934200000000001,
                            Street = "Stary Rynek 10"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0006-0000-0000-000000000006"),
                            BuildingNumber = "1",
                            IsActive = true,
                            Latitude = 41.998100000000001,
                            LocationId = new Guid("2b3c4d5e-0001-0000-0000-000000000006"),
                            Longitude = 21.4254,
                            Street = "Main Street 10"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0007-0000-0000-000000000007"),
                            BuildingNumber = "12",
                            IsActive = true,
                            Latitude = 41.033299999999997,
                            LocationId = new Guid("2b3c4d5e-0002-0000-0000-000000000007"),
                            Longitude = 21.333300000000001,
                            Street = "Bitola Blvd 45"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0008-0000-0000-000000000008"),
                            BuildingNumber = "4C",
                            IsActive = true,
                            Latitude = 41.116700000000002,
                            LocationId = new Guid("2b3c4d5e-0003-0000-0000-000000000008"),
                            Longitude = 20.800000000000001,
                            Street = "Ohrid Lakeside 3"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0009-0000-0000-000000000009"),
                            BuildingNumber = "10",
                            IsActive = true,
                            Latitude = 52.520000000000003,
                            LocationId = new Guid("3c4d5e6f-0001-0000-0000-000000000009"),
                            Longitude = 13.404999999999999,
                            Street = "Alexanderplatz 2"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0010-0000-0000-000000000010"),
                            BuildingNumber = "7B",
                            IsActive = true,
                            Latitude = 48.135100000000001,
                            LocationId = new Guid("3c4d5e6f-0002-0000-0000-000000000010"),
                            Longitude = 11.582000000000001,
                            Street = "Marienplatz 1"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0011-0000-0000-000000000011"),
                            BuildingNumber = "5A",
                            IsActive = true,
                            Latitude = 52.367600000000003,
                            LocationId = new Guid("4d5e6f70-0001-0000-0000-000000000011"),
                            Longitude = 4.9040999999999997,
                            Street = "Damrak 20"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0012-0000-0000-000000000012"),
                            BuildingNumber = "2",
                            IsActive = true,
                            Latitude = 51.922499999999999,
                            LocationId = new Guid("4d5e6f70-0002-0000-0000-000000000012"),
                            Longitude = 4.4791699999999999,
                            Street = "Coolsingel 100"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0013-0000-0000-000000000013"),
                            BuildingNumber = "1",
                            IsActive = true,
                            Latitude = 51.507399999999997,
                            LocationId = new Guid("5e6f7081-0001-0000-0000-000000000013"),
                            Longitude = -0.1278,
                            Street = "Baker Street 221B"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0014-0000-0000-000000000014"),
                            BuildingNumber = "5",
                            IsActive = true,
                            Latitude = 53.480800000000002,
                            LocationId = new Guid("5e6f7081-0002-0000-0000-000000000014"),
                            Longitude = -2.2425999999999999,
                            Street = "Deansgate 50"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0015-0000-0000-000000000015"),
                            BuildingNumber = "6",
                            IsActive = true,
                            Latitude = 41.902799999999999,
                            LocationId = new Guid("6f708192-0001-0000-0000-000000000015"),
                            Longitude = 12.4964,
                            Street = "Via del Corso 15"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0016-0000-0000-000000000016"),
                            BuildingNumber = "3",
                            IsActive = true,
                            Latitude = 45.464199999999998,
                            LocationId = new Guid("6f708192-0002-0000-0000-000000000016"),
                            Longitude = 9.1899999999999995,
                            Street = "Via Monte Napoleone 20"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0017-0000-0000-000000000017"),
                            BuildingNumber = "8",
                            IsActive = true,
                            Latitude = 48.8566,
                            LocationId = new Guid("708192a3-0001-0000-0000-000000000017"),
                            Longitude = 2.3521999999999998,
                            Street = "Rue de Rivoli 10"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0018-0000-0000-000000000018"),
                            BuildingNumber = "4",
                            IsActive = true,
                            Latitude = 45.764000000000003,
                            LocationId = new Guid("708192a3-0002-0000-0000-000000000018"),
                            Longitude = 4.8357000000000001,
                            Street = "Rue Mercière 12"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0019-0000-0000-000000000019"),
                            BuildingNumber = "7",
                            IsActive = true,
                            Latitude = 40.416800000000002,
                            LocationId = new Guid("8192a3b4-0001-0000-0000-000000000019"),
                            Longitude = -3.7038000000000002,
                            Street = "Gran Via 50"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0020-0000-0000-000000000020"),
                            BuildingNumber = "9",
                            IsActive = true,
                            Latitude = 41.385100000000001,
                            LocationId = new Guid("8192a3b4-0002-0000-0000-000000000020"),
                            Longitude = 2.1734,
                            Street = "Passeig de Gràcia 30"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0021-0000-0000-000000000021"),
                            BuildingNumber = "5",
                            IsActive = true,
                            Latitude = 52.229700000000001,
                            LocationId = new Guid("1a2b3c4d-0001-0000-0000-000000000001"),
                            Longitude = 21.0122,
                            Street = "Nowy Świat 20"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0022-0000-0000-000000000022"),
                            BuildingNumber = "2",
                            IsActive = true,
                            Latitude = 51.107900000000001,
                            LocationId = new Guid("1a2b3c4d-0004-0000-0000-000000000004"),
                            Longitude = 17.038499999999999,
                            Street = "Kazimierza Wielkiego 8"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0023-0000-0000-000000000023"),
                            BuildingNumber = "3",
                            IsActive = true,
                            Latitude = 54.351999999999997,
                            LocationId = new Guid("1a2b3c4d-0003-0000-0000-000000000003"),
                            Longitude = 18.646599999999999,
                            Street = "Chmielna 10"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0024-0000-0000-000000000024"),
                            BuildingNumber = "6",
                            IsActive = true,
                            Latitude = 50.064700000000002,
                            LocationId = new Guid("1a2b3c4d-0002-0000-0000-000000000002"),
                            Longitude = 19.945,
                            Street = "Krakowska 45"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0025-0000-0000-000000000025"),
                            BuildingNumber = "1",
                            IsActive = true,
                            Latitude = 52.4084,
                            LocationId = new Guid("1a2b3c4d-0005-0000-0000-000000000005"),
                            Longitude = 16.934200000000001,
                            Street = "Plac Wolności 5"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0026-0000-0000-000000000026"),
                            BuildingNumber = "7",
                            IsActive = true,
                            Latitude = 41.998100000000001,
                            LocationId = new Guid("2b3c4d5e-0001-0000-0000-000000000006"),
                            Longitude = 21.4254,
                            Street = "Skopje Center 3"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0027-0000-0000-000000000027"),
                            BuildingNumber = "8",
                            IsActive = true,
                            Latitude = 52.520000000000003,
                            LocationId = new Guid("3c4d5e6f-0001-0000-0000-000000000009"),
                            Longitude = 13.404999999999999,
                            Street = "Berlin Wall Str 15"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0028-0000-0000-000000000028"),
                            BuildingNumber = "9",
                            IsActive = true,
                            Latitude = 51.507399999999997,
                            LocationId = new Guid("5e6f7081-0001-0000-0000-000000000013"),
                            Longitude = -0.1278,
                            Street = "London Bridge 22"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0029-0000-0000-000000000029"),
                            BuildingNumber = "4",
                            IsActive = true,
                            Latitude = 41.902799999999999,
                            LocationId = new Guid("6f708192-0001-0000-0000-000000000015"),
                            Longitude = 12.4964,
                            Street = "Via Roma 100"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0030-0000-0000-000000000030"),
                            BuildingNumber = "3",
                            IsActive = true,
                            Latitude = 48.8566,
                            LocationId = new Guid("708192a3-0001-0000-0000-000000000017"),
                            Longitude = 2.3521999999999998,
                            Street = "Rue Lafayette 10"
                        });
                });

            modelBuilder.Entity("ITventory.Domain.Producent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Producent", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("04dabce6-41f7-4a66-8c34-963cedd62a7f"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0103"),
                            Name = "Toshiba"
                        },
                        new
                        {
                            Id = new Guid("58ea87f5-103a-4567-8fda-9b2a32be2ff9"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0103"),
                            Name = "Yamaha"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-a1b2-c3d4e5f67890"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0101"),
                            Name = "Apple"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f678-90a1-b2c3-d4e5f67890a1"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0101"),
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-7890-a1b2-c3d4-e5f67890a1b2"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0101"),
                            Name = "Intel"
                        },
                        new
                        {
                            Id = new Guid("d4e5f678-90a1-b2c3-d4e5-f67890a1b2c3"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0101"),
                            Name = "Google"
                        },
                        new
                        {
                            Id = new Guid("e5f67890-a1b2-c3d4-e5f6-7890a1b2c3d4"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0105"),
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = new Guid("f67890a1-b2c3-d4e5-f678-90a1b2c3d4e5"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0105"),
                            Name = "LG Electronics"
                        },
                        new
                        {
                            Id = new Guid("7890a1b2-c3d4-e5f6-7890-a1b2c3d4e5f6"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0102"),
                            Name = "Huawei"
                        },
                        new
                        {
                            Id = new Guid("890a1b2c-d4e5-f678-90a1-b2c3d4e5f678"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0102"),
                            Name = "Lenovo"
                        },
                        new
                        {
                            Id = new Guid("90a1b2c3-d4e5-f678-90a1-b2c3d4e5f678"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0104"),
                            Name = "Siemens"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-a1b2-c3d4e5f67891"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0104"),
                            Name = "Bosch"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f678-90a1-b2c3-d4e5f67890a2"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0106"),
                            Name = "Infosys"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-7890-a1b2-c3d4-e5f67890a1b3"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0107"),
                            Name = "ASUS"
                        },
                        new
                        {
                            Id = new Guid("d4e5f678-90a1-b2c3-d4e5-f67890a1b2c4"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0107"),
                            Name = "Acer"
                        },
                        new
                        {
                            Id = new Guid("e5f67890-a1b2-c3d4-e5f6-7890a1b2c3d5"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0109"),
                            Name = "Spotify"
                        },
                        new
                        {
                            Id = new Guid("f67890a1-b2c3-d4e5-f678-90a1b2c3d4e6"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0109"),
                            Name = "ARM Holdings"
                        },
                        new
                        {
                            Id = new Guid("7890a1b2-c3d4-e5f6-7890-a1b2c3d4e5f7"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0115"),
                            Name = "Nokia"
                        },
                        new
                        {
                            Id = new Guid("890a1b2c-d4e5-f678-90a1-b2c3d4e5f679"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0114"),
                            Name = "Ericsson"
                        },
                        new
                        {
                            Id = new Guid("90a1b2c3-d4e5-f678-90a1-b2c3d4e5f680"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0104"),
                            Name = "SAP"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-a1b2-c3d4e5f67892"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0113"),
                            Name = "Philips"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f678-90a1-b2c3-d4e5f67890a3"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0120"),
                            Name = "Comarch"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-7890-a1b2-c3d4-e5f67890a1b4"),
                            CountryId = new Guid("d61dc6e9-a541-4337-8c4d-7480dfdd0110"),
                            Name = "Dassault Systèmes"
                        });
                });

            modelBuilder.Entity("ITventory.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("MaxSKU")
                        .HasColumnType("integer");

                    b.Property<double>("NominalWorth")
                        .HasColumnType("double precision");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Area")
                        .HasColumnType("double precision");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonResponsibleId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PersonResponsibleId");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.Software", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovalType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Software", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.SoftwareLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LicenseKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LicenseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxUse")
                        .HasColumnType("integer");

                    b.Property<Guid>("SoftwareVersion")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ValidUntil")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareVersion");

                    b.ToTable("SoftwareLicense", (string)null);
                });

            modelBuilder.Entity("ITventory.Domain.SoftwareVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("LicenseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("Published")
                        .HasColumnType("date");

                    b.Property<Guid>("SoftwareId")
                        .HasColumnType("uuid");

                    b.Property<string>("VersionNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareId");

                    b.ToTable("SoftwareVersions", (string)null);
                });

            modelBuilder.Entity("Hardware", b =>
                {
                    b.HasOne("ITventory.Domain.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Model", null)
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("PrimaryUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Producent", null)
                        .WithMany()
                        .HasForeignKey("ProducentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("ITventory.Domain.Logon", "_historyOfLogons", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Domain")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("HardwareId")
                                .HasColumnType("uuid");

                            b1.Property<string>("IpAddress")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("LogonTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("HardwareId");

                            b1.HasIndex("UserId");

                            b1.ToTable("Logons", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("HardwareId");

                            b1.HasOne("ITventory.Domain.Employee", null)
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("_historyOfLogons");
                });

            modelBuilder.Entity("ITventory.Domain.Department", b =>
                {
                    b.HasOne("ITventory.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Employee", b =>
                {
                    b.HasOne("ITventory.Domain.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ITventory.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("ITventory.Domain.Room", null)
                        .WithMany("Employees")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("ITventory.Domain.Entities.JoinTables.EmployeeLicense", b =>
                {
                    b.HasOne("ITventory.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.SoftwareLicense", null)
                        .WithMany("AssignedUsers")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Entities.JoinTables.HardwareLicense", b =>
                {
                    b.HasOne("Hardware", null)
                        .WithMany()
                        .HasForeignKey("HardwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.SoftwareLicense", null)
                        .WithMany("AssignedHardware")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Entities.RatingSoftwareVersion", b =>
                {
                    b.HasOne("ITventory.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("RatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.SoftwareVersion", null)
                        .WithMany("Reviews")
                        .HasForeignKey("SoftwareVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Equipment", b =>
                {
                    b.HasOne("ITventory.Domain.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Model", null)
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Producent", null)
                        .WithMany()
                        .HasForeignKey("ProducentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("ITventory.Domain.Review", "HistoryOfReviews", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Condition")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Details")
                                .HasColumnType("text");

                            b1.Property<DateOnly>("ReviewDate")
                                .HasColumnType("date");

                            b1.Property<Guid>("ReviewerId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("ReviwedEquipmentId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("ReviewerId");

                            b1.HasIndex("ReviwedEquipmentId");

                            b1.ToTable("Review");

                            b1.HasOne("ITventory.Domain.Employee", null)
                                .WithMany()
                                .HasForeignKey("ReviewerId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ReviwedEquipmentId");
                        });

                    b.Navigation("HistoryOfReviews");
                });

            modelBuilder.Entity("ITventory.Domain.InventoryProduct", b =>
                {
                    b.HasOne("ITventory.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Room", null)
                        .WithMany("RoomInventory")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ITventory.Domain.Location", b =>
                {
                    b.HasOne("ITventory.Domain.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Model", b =>
                {
                    b.HasOne("ITventory.Domain.Producent", null)
                        .WithMany()
                        .HasForeignKey("ProducentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Office", b =>
                {
                    b.HasOne("ITventory.Domain.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Producent", b =>
                {
                    b.HasOne("ITventory.Domain.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Room", b =>
                {
                    b.HasOne("ITventory.Domain.Office", null)
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITventory.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("PersonResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Software", b =>
                {
                    b.HasOne("ITventory.Domain.Producent", null)
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.SoftwareLicense", b =>
                {
                    b.HasOne("ITventory.Domain.SoftwareVersion", null)
                        .WithMany()
                        .HasForeignKey("SoftwareVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.SoftwareVersion", b =>
                {
                    b.HasOne("ITventory.Domain.Software", null)
                        .WithMany("SoftwareVersions")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITventory.Domain.Room", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("RoomInventory");
                });

            modelBuilder.Entity("ITventory.Domain.Software", b =>
                {
                    b.Navigation("SoftwareVersions");
                });

            modelBuilder.Entity("ITventory.Domain.SoftwareLicense", b =>
                {
                    b.Navigation("AssignedHardware");

                    b.Navigation("AssignedUsers");
                });

            modelBuilder.Entity("ITventory.Domain.SoftwareVersion", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
